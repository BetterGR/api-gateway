package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"

	"github.com/BetterGR/api-gateway/graph/model"
)

// CreateStudent is the resolver for the createStudent field.
func (r *mutationResolver) CreateStudent(ctx context.Context, input model.NewStudent) (*model.Student, error) {
	panic(fmt.Errorf("not implemented: CreateStudent - createStudent"))
}

// UpdateStudent is the resolver for the updateStudent field.
func (r *mutationResolver) UpdateStudent(ctx context.Context, id string, input model.UpdateStudent) (*model.Student, error) {
	panic(fmt.Errorf("not implemented: UpdateStudent - updateStudent"))
}

// DeleteStudent is the resolver for the deleteStudent field.
func (r *mutationResolver) DeleteStudent(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteStudent - deleteStudent"))
}

// CreateStaff is the resolver for the createStaff field.
func (r *mutationResolver) CreateStaff(ctx context.Context, input model.NewStaff) (*model.Staff, error) {
	panic(fmt.Errorf("not implemented: CreateStaff - createStaff"))
}

// UpdateStaff is the resolver for the updateStaff field.
func (r *mutationResolver) UpdateStaff(ctx context.Context, id string, input model.UpdateStaff) (*model.Staff, error) {
	panic(fmt.Errorf("not implemented: UpdateStaff - updateStaff"))
}

// DeleteStaff is the resolver for the deleteStaff field.
func (r *mutationResolver) DeleteStaff(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteStaff - deleteStaff"))
}

// CreateCourse is the resolver for the createCourse field.
func (r *mutationResolver) CreateCourse(ctx context.Context, input model.NewCourse) (*model.Course, error) {
	panic(fmt.Errorf("not implemented: CreateCourse - createCourse"))
}

// UpdateCourse is the resolver for the updateCourse field.
func (r *mutationResolver) UpdateCourse(ctx context.Context, id string, input model.UpdateCourse) (*model.Course, error) {
	panic(fmt.Errorf("not implemented: UpdateCourse - updateCourse"))
}

// DeleteCourse is the resolver for the deleteCourse field.
func (r *mutationResolver) DeleteCourse(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteCourse - deleteCourse"))
}

// AssignStudentToCourse is the resolver for the assignStudentToCourse field.
func (r *mutationResolver) AssignStudentToCourse(ctx context.Context, courseID string, studentID string) (bool, error) {
	panic(fmt.Errorf("not implemented: AssignStudentToCourse - assignStudentToCourse"))
}

// AssignStaffToCourse is the resolver for the assignStaffToCourse field.
func (r *mutationResolver) AssignStaffToCourse(ctx context.Context, courseID string, staffID string) (bool, error) {
	panic(fmt.Errorf("not implemented: AssignStaffToCourse - assignStaffToCourse"))
}

// CreateGrade is the resolver for the createGrade field.
func (r *mutationResolver) CreateGrade(ctx context.Context, input model.NewGrade) (*model.Grade, error) {
	panic(fmt.Errorf("not implemented: CreateGrade - createGrade"))
}

// UpdateGrade is the resolver for the updateGrade field.
func (r *mutationResolver) UpdateGrade(ctx context.Context, id string, input model.UpdateGrade) (*model.Grade, error) {
	panic(fmt.Errorf("not implemented: UpdateGrade - updateGrade"))
}

// DeleteGrade is the resolver for the deleteGrade field.
func (r *mutationResolver) DeleteGrade(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteGrade - deleteGrade"))
}

// CreateHomework is the resolver for the createHomework field.
func (r *mutationResolver) CreateHomework(ctx context.Context, input model.NewHomework) (*model.Homework, error) {
	panic(fmt.Errorf("not implemented: CreateHomework - createHomework"))
}

// SubmitHomework is the resolver for the submitHomework field.
func (r *mutationResolver) SubmitHomework(ctx context.Context, homeworkID string, studentID string) (*model.Submission, error) {
	panic(fmt.Errorf("not implemented: SubmitHomework - submitHomework"))
}

// CreateAnnouncement is the resolver for the createAnnouncement field.
func (r *mutationResolver) CreateAnnouncement(ctx context.Context, input model.NewAnnouncement) (*model.Announcement, error) {
	panic(fmt.Errorf("not implemented: CreateAnnouncement - createAnnouncement"))
}

// Student is the resolver for the student field.
func (r *queryResolver) Student(ctx context.Context, id string) (*model.Student, error) {
	panic(fmt.Errorf("not implemented: Student - student"))
}

// Students is the resolver for the students field.
func (r *queryResolver) Students(ctx context.Context) ([]*model.Student, error) {
	panic(fmt.Errorf("not implemented: Students - students"))
}

// Staff is the resolver for the staff field.
func (r *queryResolver) Staff(ctx context.Context, id string) (*model.Staff, error) {
	panic(fmt.Errorf("not implemented: Staff - staff"))
}

// StaffMembers is the resolver for the staffMembers field.
func (r *queryResolver) StaffMembers(ctx context.Context) ([]*model.Staff, error) {
	panic(fmt.Errorf("not implemented: StaffMembers - staffMembers"))
}

// Course is the resolver for the course field.
func (r *queryResolver) Course(ctx context.Context, id string) (*model.Course, error) {
	panic(fmt.Errorf("not implemented: Course - course"))
}

// Courses is the resolver for the courses field.
func (r *queryResolver) Courses(ctx context.Context) ([]*model.Course, error) {
	panic(fmt.Errorf("not implemented: Courses - courses"))
}

// Grade is the resolver for the grade field.
func (r *queryResolver) Grade(ctx context.Context, id string) (*model.Grade, error) {
	panic(fmt.Errorf("not implemented: Grade - grade"))
}

// Grades is the resolver for the grades field.
func (r *queryResolver) Grades(ctx context.Context, studentID *string, courseID *string) ([]*model.Grade, error) {
	panic(fmt.Errorf("not implemented: Grades - grades"))
}

// Homework is the resolver for the homework field.
func (r *queryResolver) Homework(ctx context.Context, id string) (*model.Homework, error) {
	panic(fmt.Errorf("not implemented: Homework - homework"))
}

// HomeworkByCourse is the resolver for the homeworkByCourse field.
func (r *queryResolver) HomeworkByCourse(ctx context.Context, courseID string) ([]*model.Homework, error) {
	panic(fmt.Errorf("not implemented: HomeworkByCourse - homeworkByCourse"))
}

// Submission is the resolver for the submission field.
func (r *queryResolver) Submission(ctx context.Context, id string) (*model.Submission, error) {
	panic(fmt.Errorf("not implemented: Submission - submission"))
}

// SubmissionsByStudent is the resolver for the submissionsByStudent field.
func (r *queryResolver) SubmissionsByStudent(ctx context.Context, studentID string) ([]*model.Submission, error) {
	panic(fmt.Errorf("not implemented: SubmissionsByStudent - submissionsByStudent"))
}

// Announcement is the resolver for the announcement field.
func (r *queryResolver) Announcement(ctx context.Context, courseID string) ([]*model.Announcement, error) {
	panic(fmt.Errorf("not implemented: Announcement - announcement"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

